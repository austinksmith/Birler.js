{"version":3,"sources":["webpack:///birler.web.min.js","webpack:///webpack/bootstrap 583a65c1c84aad164725","webpack:///./birler.js"],"names":["birler","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","birlerLogger","this","version","logBook","error","warning","info","infoLog","warningLog","errorLog","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","createAndSaveStampedMessage","generateTimeStampedMessage","searchLogEntries","searchLogBook","value","message","timeStampedMessage","console","warn","reject","eventType","record","Date","now","type","toLowerCase","push","logBookEntries","searchString","searchResults","indexOf","eventTypeResults","tmpEntries","hasOwnProperty","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","results"],"mappings":"AAAA,GAAIA,QACK,SAAUC,GCGnB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDOM,SAAUI,EAAQD,EAASH,GAEhCI,EAAOD,QAAUH,EAAoB,IAKhC,SAAUI,EAAQD,GEzCxB,YF0DC,SAASQ,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MEtD3hBkB,EF0Dc,WEpDlB,QAAAA,KAAcpB,EAAAqB,KAAAD,GACZC,KAAKC,QAAU,QACfD,KAAKE,SACHC,SACAC,WACAC,SAEFL,KAAKK,KAAOL,KAAKM,QACjBN,KAAKI,QAAUJ,KAAKO,WACpBP,KAAKG,MAAQH,KAAKQ,SAClBR,KAAKS,aAAeT,KAAKU,cACzBV,KAAKW,cAAgBX,KAAKY,aAC1BZ,KAAKa,4BAA8Bb,KAAKc,2BACxCd,KAAKe,iBAAmBf,KAAKgB,cF4N9B,MAvJAjC,GAAagB,IACXJ,IAAK,UACLsB,MAAO,SE/DFC,GACN,GAAIC,GAAqBnB,KAAKa,4BAA4B,OAAQK,EAElE,OADAE,SAAQf,KAAKc,GACNA,KFyENxB,IAAK,aACLsB,MAAO,SElECC,GACT,GAAIC,GAAqBnB,KAAKa,4BAA4B,UAAWK,EAErE,OADAE,SAAQC,KAAKF,GACNA,KF6ENxB,IAAK,WACLsB,MAAO,SErEDC,EAASI,GAChB,GAAIH,GAAqBnB,KAAKa,4BAA4B,QAASK,EAEnE,OADAE,SAAQjB,MAAMgB,GACXG,EACMA,EAAOH,GAETA,KFgFNxB,IAAK,6BACLsB,MAAO,SExEiBM,EAAWL,GACpC,GAAIM,iBAAuBxB,KAAKC,QAA5B,IAAuCsB,EAAvC,KAAqDL,EAArD,MAAkEO,KAAKC,KAE3E,OADA1B,MAAKS,aAAakB,KAAKC,cAAeJ,GAC/BA,KFkFN7B,IAAK,gBACLsB,MAAO,SE3EIM,EAAWL,GACvBlB,KAAKE,QAAQqB,GAAWM,KAAKX,MFqF5BvB,IAAK,eACLsB,MAAO,SE9EGM,GACX,MAAGA,GACMvB,KAAKE,QAAQqB,GAEfvB,KAAKE,WFyFXP,IAAK,sBACLsB,MAAO,SEjFUa,EAAgBC,GAClC,GAAIC,MACA7C,EAAI,CACR,KAAKA,EAAGA,EAAI2C,EAAe1C,OAAQD,IAC9B2C,EAAe3C,GAAG8C,QAAQF,MAAkB,GAC7CC,EAAcH,KAAKC,EAAe3C,GAGtC,OAAO6C,MF4FNrC,IAAK,8BACLsB,MAAO,SEpFkBf,EAAS6B,GACnC,GAAIC,MACArC,SAAKuC,SAAkBC,EAAa,IACxC,KAAIxC,IAAOO,GACT,GAAGA,EAAQkC,eAAezC,GAAM,CAC9BwC,EAAajC,EAAQP,GACrBuC,EAAmBlC,KAAKqC,oBAAoBF,EAAYJ,EACxD,KAAK,GAAI5C,GAAI+C,EAAiB9C,OAAS,EAAGD,GAAK,EAAGA,IAChD6C,EAAcH,KAAKK,EAAiB/C,IAI1C,MAAO6C,MFiGNrC,IAAK,gBACLsB,MAAO,SEzFIc,EAAcR,GAC1B,GAAIe,KAMJ,OAJEA,GADCf,EACcvB,KAAKqC,oBAAoBrC,KAAKE,QAAQqB,GAAYQ,GAElD/B,KAAKuC,4BAA4BvC,KAAKE,QAAS6B,IAG9DS,MAAOF,EAAalD,OACpBqD,QAASH,OF8FLvC,KEzFNjC,EAAS,GAAIiC,EAEI,oBAAX3B,IAAoD,mBAAnBA,GAAOD,UAChDC,EAAOD,QAAUL","file":"birler.web.min.js","sourcesContent":["var birler =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Birler.js                                                                 *\n\t* Description: 100% Vanilla Javascript Searchable Logging System                   *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar birlerLogger = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function birlerLogger() {\n\t    _classCallCheck(this, birlerLogger);\n\t\n\t    this.version = '1.0.0', this.logBook = {\n\t      error: [],\n\t      warning: [],\n\t      info: []\n\t    };\n\t    this.info = this.infoLog;\n\t    this.warning = this.warningLog;\n\t    this.error = this.errorLog;\n\t    this.saveLogEntry = this.saveToLogBook;\n\t    this.getLogEntries = this.fetchLogBook;\n\t    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n\t    this.searchLogEntries = this.searchLogBook;\n\t  }\n\t\n\t  /**\n\t  * @function infoLog - Creates and saves info log event to log book with timestamp\n\t  * @param {string} message - Logged info event message\n\t  * @return {string} timeStampedMessage- Timestamped info log event record\n\t  */\n\t\n\t\n\t  _createClass(birlerLogger, [{\n\t    key: 'infoLog',\n\t    value: function infoLog(message) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n\t      console.info(timeStampedMessage);\n\t      return timeStampedMessage;\n\t    }\n\t\n\t    /**\n\t    * @function warningLog - Creates and saves warning log event to log book with timestamp\n\t    * @param {string} message - Logged warning event message\n\t    * @return {string} timeStampedMessage- Timestamped warning log event record\n\t    */\n\t\n\t  }, {\n\t    key: 'warningLog',\n\t    value: function warningLog(message) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n\t      console.warn(timeStampedMessage);\n\t      return timeStampedMessage;\n\t    }\n\t\n\t    /**\n\t    * @function errorLog - Creates and saves error log event to log book with timestamp\n\t    * @param {string} message - Logged error event message\n\t    * @param {function} reject - Optional callback function to invoke promise rejection\n\t    * @return {string} timeStampedMessage- Timestamped error log event record\n\t    */\n\t\n\t  }, {\n\t    key: 'errorLog',\n\t    value: function errorLog(message, reject) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n\t      console.error(timeStampedMessage);\n\t      if (reject) {\n\t        return reject(timeStampedMessage);\n\t      }\n\t      return timeStampedMessage;\n\t    }\n\t\n\t    /**\n\t    * @function generateTimeStampedMessage - Creates and saves log event to log book with timestamp\n\t    * @param {string} type - Specific eventType (warning, info, error)\n\t    * @param {string} message - Logged event message\n\t    * @return {string} record - Timestamped log event record\n\t    */\n\t\n\t  }, {\n\t    key: 'generateTimeStampedMessage',\n\t    value: function generateTimeStampedMessage(eventType, message) {\n\t      var record = 'Birler.js v' + this.version + ' ' + eventType + ': ' + message + ' @ ' + Date.now();\n\t      this.saveLogEntry(type.toLowerCase(), record);\n\t      return record;\n\t    }\n\t\n\t    /**\n\t    * @function saveToLogBook - Saves log event to log book\n\t    * @param {string} eventType - Specific eventType to save to, (warning, info, error)\n\t    * @param {string} message - Logged event message\n\t    */\n\t\n\t  }, {\n\t    key: 'saveToLogBook',\n\t    value: function saveToLogBook(eventType, message) {\n\t      this.logBook[eventType].push(message);\n\t    }\n\t\n\t    /**\n\t    * @function fetchLogBook - Returns saved log entries\n\t    * @param {string} eventType - Optional event type (info, warning, error)\n\t    * @return {array} logBook - Returns saved log entries\n\t    */\n\t\n\t  }, {\n\t    key: 'fetchLogBook',\n\t    value: function fetchLogBook(eventType) {\n\t      if (eventType) {\n\t        return this.logBook[eventType];\n\t      }\n\t      return this.logBook;\n\t    }\n\t\n\t    /**\n\t    * @function findStringInLogBook - Searches a specific saved log entries category (ie. info) for search string\n\t    * @param {array} logBookEntries - Array of log entries (ie. info log array)\n\t    * @param {string} searchstring - Search string to look for in logBookEntries\n\t    * @return {array} searchResults - Array of results matching searchString\n\t    */\n\t\n\t  }, {\n\t    key: 'findStringInLogBook',\n\t    value: function findStringInLogBook(logBookEntries, searchString) {\n\t      var searchResults = [];\n\t      var i = 0;\n\t      for (i; i < logBookEntries.length; i++) {\n\t        if (logBookEntries[i].indexOf(searchString) !== -1) {\n\t          searchResults.push(logBookEntries[i]);\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t\n\t    /**\n\t    * @function findStringInLogBookAllTypes - Searches all saved log entries for search string\n\t    * @param {object} logBook - Saved log entries\n\t    * @param {string} searchstring - Search string to look for in logBook\n\t    * @return {array} searchResults - Array of results matching searchString\n\t    */\n\t\n\t  }, {\n\t    key: 'findStringInLogBookAllTypes',\n\t    value: function findStringInLogBookAllTypes(logBook, searchString) {\n\t      var searchResults = [];\n\t      var key = void 0,\n\t          eventTypeResults = void 0,\n\t          tmpEntries = null;\n\t      for (key in logBook) {\n\t        if (logBook.hasOwnProperty(key)) {\n\t          tmpEntries = logBook[key];\n\t          eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n\t          for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n\t            searchResults.push(eventTypeResults[i]);\n\t          }\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t\n\t    /**\n\t    * @function searchLogBook - Searches saved log entries for search string\n\t    * @param {string} searchstring - Search string to look for in logBook\n\t    * @param {string} eventType - Specific event type to search within (warning, error, info)\n\t    * @return {object} - Search results object\n\t    */\n\t\n\t  }, {\n\t    key: 'searchLogBook',\n\t    value: function searchLogBook(searchString, eventType) {\n\t      var finalResults = [];\n\t      if (eventType) {\n\t        finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n\t      } else {\n\t        finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n\t      }\n\t      return {\n\t        total: finalResults.length,\n\t        results: finalResults\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return birlerLogger;\n\t}();\n\t\n\tvar birler = new birlerLogger();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = birler;\n\t}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// birler.web.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 583a65c1c84aad164725","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Birler.js                                                                 *\n* Description: 100% Vanilla Javascript Searchable Logging System                   *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass birlerLogger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = '1.0.0',\n    this.logBook = {\n      error: [],\n      warning: [],\n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  /**\n  * @function infoLog - Creates and saves info log event to log book with timestamp\n  * @param {string} message - Logged info event message\n  * @return {string} timeStampedMessage- Timestamped info log event record\n  */\n  infoLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n    console.info(timeStampedMessage);\n    return timeStampedMessage;\n  }\n\n  /**\n  * @function warningLog - Creates and saves warning log event to log book with timestamp\n  * @param {string} message - Logged warning event message\n  * @return {string} timeStampedMessage- Timestamped warning log event record\n  */\n  warningLog(message) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n    console.warn(timeStampedMessage);\n    return timeStampedMessage;\n  }\n\n  /**\n  * @function errorLog - Creates and saves error log event to log book with timestamp\n  * @param {string} message - Logged error event message\n  * @param {function} reject - Optional callback function to invoke promise rejection\n  * @return {string} timeStampedMessage- Timestamped error log event record\n  */\n  errorLog(message, reject) {\n    let timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n    console.error(timeStampedMessage);\n    if(reject) {\n      return reject(timeStampedMessage);\n    }\n    return timeStampedMessage;\n  }\n\n  /**\n  * @function generateTimeStampedMessage - Creates and saves log event to log book with timestamp\n  * @param {string} type - Specific eventType (warning, info, error)\n  * @param {string} message - Logged event message\n  * @return {string} record - Timestamped log event record\n  */\n  generateTimeStampedMessage(eventType, message) {\n    let record = `Birler.js v${this.version} ${eventType}: ${message} @ ${Date.now()}`\n    this.saveLogEntry(type.toLowerCase(), record);\n    return record;\n  }\n\n  /**\n  * @function saveToLogBook - Saves log event to log book\n  * @param {string} eventType - Specific eventType to save to, (warning, info, error)\n  * @param {string} message - Logged event message\n  */\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  /**\n  * @function fetchLogBook - Returns saved log entries\n  * @param {string} eventType - Optional event type (info, warning, error)\n  * @return {array} logBook - Returns saved log entries\n  */\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  /**\n  * @function findStringInLogBook - Searches a specific saved log entries category (ie. info) for search string\n  * @param {array} logBookEntries - Array of log entries (ie. info log array)\n  * @param {string} searchstring - Search string to look for in logBookEntries\n  * @return {array} searchResults - Array of results matching searchString\n  */\n  findStringInLogBook(logBookEntries, searchString) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(searchString) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  /**\n  * @function findStringInLogBookAllTypes - Searches all saved log entries for search string\n  * @param {object} logBook - Saved log entries\n  * @param {string} searchstring - Search string to look for in logBook\n  * @return {array} searchResults - Array of results matching searchString\n  */\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n        for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n          searchResults.push(eventTypeResults[i])\n        }\n      }\n    }\n    return searchResults;\n  }\n\n  /**\n  * @function searchLogBook - Searches saved log entries for search string\n  * @param {string} searchstring - Search string to look for in logBook\n  * @param {string} eventType - Specific event type to search within (warning, error, info)\n  * @return {object} - Search results object\n  */\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar birler = new birlerLogger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = birler;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./birler.js"],"sourceRoot":""}